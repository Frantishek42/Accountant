from aiogram import types
from aiogram.dispatcher.filters import BoundFilter


class UserID(BoundFilter):
    """
    –î–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å UserID —Ä–æ–¥–∏—Ç–µ–ª—å BoundFilter —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    """
    async def check(self, message: types.Message) -> bool:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param message:
        :return:
        """
        return message.from_user.id in [49577767, 1362130241]


class Profit(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        return message.text == 'üìà –ü—Ä–∏–±—ã–ª—å'


class Expenses(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        return message.text == 'üìâ –ó–∞—Ç—Ä–∞—Ç—ã'


class Wallet(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        return message.text == 'üëõ –ö–æ—à–µ–ª–µ–∫'


class Report(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        return message.text == 'üìñ –û—Ç—á–µ—Ç'


class Number(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        if message.text.isdigit():
            return True
        else:
            await message.answer('–í—ã –≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return False
