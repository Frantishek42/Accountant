from typing import Dict
from config_data.config import ADMIN
from aiogram.types import Message, CallbackQuery
from handlers.custom.admin import admin, get_count_user, get_count_subscriber
from handlers.custom.auto_payment import auto_payment_new
from handlers.custom.expenses import get_expenses, call_expenses
from handlers.custom.home import home_menu
from handlers.custom.profit import profit, call_profit
from handlers.custom.settings import user_settings, get_settings
from handlers.custom.subscription import get_subscription
from states.state_user import FSMUser
from aiogram.dispatcher import FSMContext
from loader import *
from logger.log import logger
from database.accountant import RegisterUser, WalletDB, UserSubscription
from aiogram_dialog import Window, Dialog, StartMode, DialogManager
from aiogram_dialog.widgets.text import Const, Format, Multi
from aiogram_dialog.widgets.kbd import Button, Row, Group, Column
from loader import registry
from peewee import DoesNotExist
from aiogram_dialog.widgets.when import Whenable
import time
import datetime
from aiogram_dialog.exceptions import UnknownIntent


async def get_admin(state: FSMContext, **kwargs):
    async with state.proxy() as data:
        user_first_name = data.get('user_name')
        user_id = data.get('user_id')
    return {
        "name": f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_first_name}',
        'user_id': user_id,
        "extended": True,
    }


def is_admin(data: Dict, widget: Whenable, manager: DialogManager):
    return data.get("user_id") == int(ADMIN)


@logger.catch()
async def get_data(state: FSMContext, **kwargs):

    async with state.proxy() as data:
        user_id = data.get('user_id')
    user = RegisterUser.get(RegisterUser.user_id == user_id)
    try:
        time_sub = UserSubscription.get(UserSubscription.user_id == user.id)
        middle_time = int(time_sub.time_sub) - int(time.time())
        if middle_time > 0:
            dt = datetime.timedelta(seconds=middle_time)
            dt = str(dt).replace('days', '–¥–Ω–µ–π')
            dt = dt.replace('day', '–¥–µ–Ω—å')
            text = f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{dt}</b>'
        else:
            text = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
    except DoesNotExist as exc:
        logger.info(f'{exc.__class__.__name__} {exc}')
        text = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
    card, cash, credit = 0, 0, 0
    try:
        user_money = WalletDB.get(WalletDB.user_id == user.id)
        card, cash, credit = user_money.money_card, user_money.money_cash, user_money.money_credit

    except DoesNotExist as exc:
        logger.info(f'{exc.__class__.__name__} {exc}')
    return {'name': (f"{text}\nüí≥ –ö–∞—Ä—Ç–∞: <b>{card}</b> üíµ –ù–∞–ª–∏—á–Ω—ã–µ: <b>{cash}"
                     f"\n</b> üè¶ –ö—Ä–µ–¥–∏—Ç: <b>{credit}</b> üí∞ –û–±—â–∞—è: <b>{card + cash - credit}</b>")
            }


@logger.catch()
async def go_clicked(call: CallbackQuery, button: Button, manager: DialogManager):
    await manager.done()
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='Go click')

try:
    main_window = Dialog(
        Window(
            Multi(
                Const("‚â° –ú–µ–Ω—é"),
            ),
            Group(
                Column(
                    Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="home", on_click=home_menu),
                    Button(Const("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id="settings", on_click=go_clicked),
                    when="extended",
                ),
                Button(Const("Admin"), id="admin", on_click=admin, when=is_admin),
            ),
            state=FSMUser.start,
            getter=get_admin
        ),
        Window(
            Multi(
                Const("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ),
            Group(
                Row(
                    Button(Const("üí∞ –ë—é–¥–∂–µ—Ç"), id="budget", on_click=get_settings),
                    Button(Const("üóû –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂"), id="auto_payment", on_click=auto_payment_new),

                ),
                Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="home", on_click=home_menu),
            ),
            state=FSMUser.settings,
        ),
        Window(
            Multi(
                Format("<b>‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n{name}"),
            ),
            Group(
                Row(
                    Button(Const("üìà –ü—Ä–∏–±—ã–ª—å"), id="profit", on_click=profit),
                    Button(Const("üìâ –ó–∞—Ç—Ä–∞—Ç—ã"), id="expenses", on_click=get_expenses),
                    Button(Const("‚åõ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂"), id="auto_payment", on_click=auto_payment_new),
                ),
                Button(Const("‚ô• –ü–æ–¥–ø–∏—Å–∫–∞"), id="subscription", on_click=get_subscription),
                Button(Const("üìñ –û—Ç—á–µ—Ç"), id="report", on_click=go_clicked),
                Button(Const("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id="settings", on_click=user_settings),
            ),
            state=FSMUser.home,
            getter=get_data,

        ),
        Window(
            Const("–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é –ø—Ä–∏–±—ã–ª—å"),
            Row(
                Button(Const("üõ† –ó–∞—Ä–ø–ª–∞—Ç—É"), id="salary", on_click=call_profit),
                Button(Const("ü™õ –ü–æ–¥—Ä–∞–±–æ—Ç–∫—É"), id="part_time_job", on_click=call_profit),
            ),
            Row(
                Button(Const("üéÅ –ü–æ–¥–∞—Ä–æ–∫"), id="gift", on_click=call_profit),
                Button(Const("üßÆ –ü—Ä–æ–¥–∞–∂—É"), id="sale", on_click=call_profit),
            ),
            Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="home", on_click=home_menu),
            state=FSMUser.profit,
        ),
        Window(
            Const("–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é –∑–∞—Ç—Ä–∞—Ç—ã"),
            Row(
                Button(Const("üç± –ü—Ä–æ–¥—É–∫—Ç—ã"), id="products", on_click=call_expenses),
                Button(Const("üç∫ –ê–ª–∫–æ–≥–æ–ª—å"), id="alcohol", on_click=call_expenses),
                Button(Const("üè† –ñ–ö–•"), id="communal", on_click=call_expenses),
            ),
            Row(
                Button(Const("üèé –ê–ó–°"), id="gas_station", on_click=call_expenses),
                Button(Const("üöó –ú–∞—à–∏–Ω–∞"), id="car", on_click=call_expenses),
                Button(Const("üåê –ò–Ω—Ç. –º–∞–≥–∞–∑–∏–Ω"), id="online_store", on_click=call_expenses),
            ),
            Row(
                Button(Const("üëï –û–¥–µ–∂–¥–∞"), id="clothes", on_click=call_expenses),
                Button(Const("‚òé –°–≤—è–∑—å"), id="connection", on_click=call_expenses),
                Button(Const("üèñ –û—Ç–¥—ã—Ö"), id="rest", on_click=call_expenses),
            ),
            Button(Const("‚úô –î–æ–±–∞–≤–∏—Ç—å / –í—ã–±—Ä–∞—Ç—å —Å–≤–æ–µ"), id="add_choose", on_click=call_expenses),
            Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="home", on_click=home_menu),
            state=FSMUser.expenses,
        ),
        Window(
            Const("Admin –ø–∞–Ω–µ–ª—å"),
            Button(Const('–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'), id='count_user', on_click=get_count_user),
            Button(Const('–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'), id='count_subscriber', on_click=get_count_subscriber),
            state=FSMUser.admin
        ),
    )

    registry.register(main_window)
except UnknownIntent as exc:
    logger.error(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {exc.__class__.__name__}')
