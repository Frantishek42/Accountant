from typing import Dict
from config_data.config import ADMIN
from filters.extension_filters import UserRegister
from aiogram.types import Message, CallbackQuery
from handlers.custom.admin import admin, get_count_user, get_count_subscriber
from handlers.custom.expenses import get_expenses, call_expenses
from handlers.custom.profit import profit, call_profit
from states.state_user import FSMUser
from aiogram.dispatcher import FSMContext
from loader import *
from logger.log import logger
from database.accountant import RegisterUser, WalletDB
from aiogram_dialog import Window, Dialog, StartMode, DialogManager
from aiogram_dialog.widgets.text import Const, Format, Multi
from aiogram_dialog.widgets.kbd import Button, Row, Group, Column
from loader import registry
from peewee import DoesNotExist
from aiogram_dialog.widgets.when import Whenable


async def get_admin(state: FSMContext, **kwargs):
    async with state.proxy() as data:
        user_first_name = data.get('user_name')
        user_id = data.get('user_id')
    return {
        "name": f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_first_name}',
        'user_id': user_id,
        "extended": True,
    }


def is_admin(data: Dict, widget: Whenable, manager: DialogManager):
    return data.get("user_id") == int(ADMIN)


@logger.catch()
async def get_data(state: FSMContext, **kwargs):
    async with state.proxy() as data:
        user_id = data.get('user_id')
    user = RegisterUser.get(RegisterUser.user_id == user_id)
    if user.private:
        text = f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {user.private_date}'
    else:
        text = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
    card, cash, credit = 0, 0, 0
    try:
        user_money = WalletDB.get(WalletDB.user_id == user.id)
        card, cash, credit = user_money.money_card, user_money.money_cash, user_money.money_credit

    except DoesNotExist as exc:
        logger.info(f'{exc.__class__.__name__} {exc}')
    return {'name': (f"{text}\nüí≥ –ö–∞—Ä—Ç–∞: <b>{card}</b> üíµ –ù–∞–ª–∏—á–Ω—ã–µ: <b>{cash}"
                     f"\n</b> üè¶ –ö—Ä–µ–¥–∏—Ç: <b>{credit}</b> üí∞ –û–±—â–∞—è: <b>{card + cash - credit}</b>")
            }


@logger.catch()
async def home_menu(call: CallbackQuery, button: Button, dialog_manager: DialogManager):
    async with dialog_manager.data.get('state').proxy() as data:
        data['user_id'] = call.from_user.id

    await dialog_manager.dialog().switch_to(FSMUser.home)

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –∑–∞—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@logger.catch()
async def go_clicked(call: CallbackQuery, button: Button, manager: DialogManager):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='Go click')


main_window = Dialog(
    Window(
        Multi(
            Const("‚â° –ú–µ–Ω—é"),
        ),
        Group(
            Column(
                Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="report", on_click=home_menu),
                Button(Const("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞"), id="settings", on_click=go_clicked),
                when="extended",
            ),
            Button(Const("Admin"), id="admin", on_click=admin, when=is_admin),
        ),
        state=FSMUser.start,
        getter=get_admin
    ),
    Window(
        Format("<b>‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n{name}"),
        Row(
            Button(Const("üìà –ü—Ä–∏–±—ã–ª—å"), id="profit", on_click=profit),
            Button(Const("üìâ –ó–∞—Ç—Ä–∞—Ç—ã"), id="expenses", on_click=get_expenses),
            Button(Const("‚åõ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂"), id="auto_payment", on_click=go_clicked),
        ),
        Button(Const("üìñ –û—Ç—á–µ—Ç"), id="report", on_click=go_clicked),
        Button(Const("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞"), id="settings", on_click=go_clicked),
        state=FSMUser.home,
        getter=get_data,
    ),
    Window(
        Const("–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é –ø—Ä–∏–±—ã–ª—å"),
        Row(
            Button(Const("üõ† –ó–∞—Ä–ø–ª–∞—Ç—É"), id="salary", on_click=call_profit),
            Button(Const("ü™õ –ü–æ–¥—Ä–∞–±–æ—Ç–∫—É"), id="part_time_job", on_click=call_profit),
        ),
        Row(
            Button(Const("üéÅ –ü–æ–¥–∞—Ä–æ–∫"), id="gift", on_click=call_profit),
            Button(Const("üßÆ –ü—Ä–æ–¥–∞–∂—É"), id="sale", on_click=call_profit),
        ),
        Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="nothing", on_click=home_menu),
        state=FSMUser.profit,
    ),
    Window(
        Const("–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é –∑–∞—Ç—Ä–∞—Ç—ã"),
        Row(
            Button(Const("üç± –ü—Ä–æ–¥—É–∫—Ç—ã"), id="products", on_click=call_expenses),
            Button(Const("üç∫ –ê–ª–∫–æ–≥–æ–ª—å"), id="alcohol", on_click=call_expenses),
            Button(Const("üè† –ñ–ö–•"), id="communal", on_click=call_expenses),
        ),
        Row(
            Button(Const("üèé –ê–ó–°"), id="gas_station", on_click=call_expenses),
            Button(Const("üöó –ú–∞—à–∏–Ω–∞"), id="car", on_click=call_expenses),
            Button(Const("üåê –ò–Ω—Ç. –º–∞–≥–∞–∑–∏–Ω"), id="online_store", on_click=call_expenses),
        ),
        Row(
            Button(Const("üëï –û–¥–µ–∂–¥–∞"), id="clothes", on_click=call_expenses),
            Button(Const("‚òé –°–≤—è–∑—å"), id="connection", on_click=call_expenses),
            Button(Const("üèñ –û—Ç–¥—ã—Ö"), id="rest", on_click=call_expenses),
        ),
        Button(Const("‚úô –î–æ–±–∞–≤–∏—Ç—å / –í—ã–±—Ä–∞—Ç—å —Å–≤–æ–µ"), id="add_choose", on_click=call_expenses),
        Button(Const("‚â° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="nothing", on_click=home_menu),
        state=FSMUser.expenses,
    ),
    Window(
        Const("Admin –ø–∞–Ω–µ–ª—å"),
        Button(Const('–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'), id='count_user', on_click=get_count_user),
        Button(Const('–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'), id='count_subscriber', on_click=get_count_subscriber),
        state=FSMUser.admin
    )
)

registry.register(main_window)


@dp.message_handler(UserRegister(), commands=['start'], state='*')
@logger.catch()
async def process_start_command(message: Message, dialog_manager: DialogManager, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    :param state:
    :param dialog_manager:
    :param message:
    :return:
    """
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞—à–µ–ª –≤ –º–µ–Ω—é')
    data = await state.get_data()
    if data is not None:
        await state.finish()
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!")
    async with state.proxy() as data:
        data['user_name'] = message.from_user.first_name
        data['user_id'] = message.from_user.id
    await dialog_manager.start(FSMUser.start, mode=StartMode.NEW_STACK)


@dp.callback_query_handler(state=FSMUser.register_user)
@logger.catch()
async def register(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state:
    :param call:
    :return:
    """
    if call.data == 'yes':
        logger.info(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.first_name}')
        RegisterUser.create(user_id=call.from_user.id, first_name=call.from_user.first_name)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéä –í–∞—Å <b>{call.from_user.first_name}</b>!!!'
                                         '\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üëç'
                                         '\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ üëâ /start'
                                         '\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /help')
    elif call.data == 'no':
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚ùå')
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úÖ')
    await state.finish()
