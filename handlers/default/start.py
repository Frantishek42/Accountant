from aiogram.types import Message, CallbackQuery
from filters.extension_filters import UserRegister
from states.state_user import FSMUser
from aiogram.dispatcher import FSMContext
from loader import *
from logger.log import logger
from database.accountant import RegisterUser
from aiogram_dialog import StartMode, DialogManager


@dp.message_handler(UserRegister(), commands=['start'], state='*')
@logger.catch()
async def process_start_command(message: Message, dialog_manager: DialogManager, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    :param state:
    :param dialog_manager:
    :param message:
    :return:
    """
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞—à–µ–ª –≤ –º–µ–Ω—é')
    data = await state.get_data()
    if data is not None:
        await state.finish()
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!")
    async with state.proxy() as data:
        data['user_name'] = message.from_user.first_name
        data['user_id'] = message.from_user.id
    await dialog_manager.start(FSMUser.start, mode=StartMode.NEW_STACK)


@dp.callback_query_handler(state=FSMUser.register_user)
@logger.catch()
async def register(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state:
    :param call:
    :return:
    """
    if call.data == 'yes':
        logger.info(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.first_name}')
        RegisterUser.create(user_id=call.from_user.id, first_name=call.from_user.first_name)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéä –í–∞—Å <b>{call.from_user.first_name}</b>!!!'
                                         '\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üëç'
                                         '\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ üëâ /start'
                                         '\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /help')
    elif call.data == 'no':
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚ùå')
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úÖ')
    await state.finish()
